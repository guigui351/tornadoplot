)
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(safetyGraphics)
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(safetyGraphics)
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(safetyGraphics)
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(safetyGraphics)
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
# Add default treatment columns
mapping <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = mapping$data, charts=charts, mapping=mapping)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(charts=charts, mapping=mapping)
mapping$data
test <- mapping$data
View(test)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = sdtm, charts=charts, meta=mapping, mapping=mapping)
sdtm <- mapping$data
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = sdtm, charts=charts, meta=mapping, mapping=mapping)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = sdtm, charts=charts, mapping=mapping)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
#safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
# Add default treatment columns
mapping <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
sdtm <- mapping$data
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = sdtm, charts=charts, mapping=mapping)
makeMeta(charts)
tornadoplot::run_app()
charts
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
install.packages("ggtext")
remotes::install_github("hadley/emo")
remotes::install_github("hadley/emo", force = TRUE)
remotes::install_github("JohnCoene/typedjs", force = TRUE)
remotes::install_github("daattali/shinybrowser", force = TRUE)
remotes::install_github("RinteRface/fullPage", force = TRUE)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
install.packages("patchwork")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
install.packages("safetyData")
install.packages("safetyData")
library(dplyr)
library(safetyData)
# Remove screen failures data
sdtm_dm <- safetyData:: sdtm_dm %>% filter (ARMCD != "Scrnfail")
# settings for tornado plot
setting <-list(
aes=list(id_col="USUBJID", bodsys_col="AEBODSYS", term_col="AEDECOD", severity_col="AESEV", serious_col="AESER"),
dm=list(id_col="USUBJID", treatment_col="ARM")
)
# params to be loaded for the tornado plot / mandatory except if it runs with SafetyGraphics
params <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
library(dplyr)
library(safetyData)
# Remove screen failures data
sdtm_dm <- safetyData:: sdtm_dm %>% filter (ARMCD != "Scrnfail")
# settings for tornado plot
setting <-list(
aes=list(id_col="USUBJID", bodsys_col="AEBODSYS", term_col="AEDECOD", severity_col="AESEV", serious_col="AESER"),
dm=list(id_col="USUBJID", treatment_col="ARM")
)
# params to be loaded for the tornado plot / mandatory except if it runs with SafetyGraphics
params <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
library(dplyr)
library(safetyData)
# Grouping
format_racegr1 <- function(x) {
case_when(
x == "WHITE" ~ "White",
x != "WHITE" ~ "Non-white",
TRUE ~ "Missing"
)
}
format_region1 <- function(x) {
case_when(
x %in% c("CAN", "USA") ~ "NA",
!is.na(x) ~ "RoW",
TRUE ~ "Missing"
)
}
format_lddthgr1 <- function(x) {
case_when(
x <= 30 ~ "<= 30",
x > 30 ~ "> 30",
TRUE ~ NA_character_
)
}
# EOSSTT mapping
format_eoxxstt <- function(x) {
case_when(
x %in% c("COMPLETED") ~ "COMPLETED",
!(x %in% c("COMPLETED", "SCREEN FAILURE")) & !is.na(x) ~ "DISCONTINUED",
x %in% c("SCREEN FAILURE") ~ NA_character_,
TRUE ~ "ONGOING"
)
}
# Remove screen failures data
sdtm_dm <- safetyData:: sdtm_dm %>% filter (ARMCD != "Scrnfail")
# settings for tornado plot
setting <-list(
dm=list(id_col="USUBJID", treatment_col="ARM", "treatment_values"=list(group1="Placebo", "group2" = "Xanomeline High Dose"), siteid_col="SITEID", country_col="COUNTRY", ifcdt_col="RFICDTC", rando_col="RFSTDTC"),
aes=list(id_col="USUBJID", bodsys_col="AEBODSYS", term_col="AEDECOD", severity_col="AESEV", serious_col="AESER"),
ex=list(id_col="USUBJID", stdtc_col="EXSTDTC", endtc_col="EXENDTC")
)
# params to be loaded for the tornado plot / mandatory except if it runs with SafetyGraphics
params <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae, ex = safetyData::sdtm_ex, ds=safetyData::sdtm_ds), settings = setting)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
## Run checks ----
## Check the package before sending to prod
devtools::check()
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(dplyr)
library(safetyData)
# Grouping
format_racegr1 <- function(x) {
case_when(
x == "WHITE" ~ "White",
x != "WHITE" ~ "Non-white",
TRUE ~ "Missing"
)
}
format_region1 <- function(x) {
case_when(
x %in% c("CAN", "USA") ~ "NA",
!is.na(x) ~ "RoW",
TRUE ~ "Missing"
)
}
format_lddthgr1 <- function(x) {
case_when(
x <= 30 ~ "<= 30",
x > 30 ~ "> 30",
TRUE ~ NA_character_
)
}
# EOSSTT mapping
format_eoxxstt <- function(x) {
case_when(
x %in% c("COMPLETED") ~ "Completed",
!(x %in% c("COMPLETED", "SCREEN FAILURE")) & !is.na(x) ~ "Discontinued",
x %in% c("SCREEN FAILURE") ~ NA_character_,
TRUE ~ "Ongoing"
)
}
# Remove screen failures data
sdtm_dm <- safetyData:: sdtm_dm %>% filter (ARMCD != "Scrnfail")
# settings for my study
setting <-list(
dm=list(id_col="USUBJID", treatment_col="ACTARM", "treatment_values"=list(group1="Placebo", "group2"="Xanomeline High Dose"))
)
# params to be loaded in the studytracker app / mandatory to load all these sdtm datasets mentionned below
params <- list(data = list(dm  = sdtm_dm,
aes = safetyData::sdtm_ae,
ex  = safetyData::sdtm_ex,
ds  = safetyData::sdtm_ds,
lb  = safetyData::sdtm_lb),
settings = setting)
# standalone tornadoplot / params parameter automatically called by the run_app function
tornadoplot::run_app()
