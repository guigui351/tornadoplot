ggplot2::theme_void(base_family = "sans") +
# Update global theme
ggplot2::theme(
# The default font color when not explicitly specified
text = element_text(color = "grey24"),
# Use a light color for the background of the plot and the panel.
plot.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
panel.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
# Adjust axis parameters such as size and color.
axis.text.x.top = element_text(size = 6, color = "grey24"),
axis.ticks.x.top = element_line(size = 0.2, color = "grey24"),
axis.ticks.length.x.top = unit(1, "mm"),
axis.title.x.top = element_text(hjust=0.965, size = 6, margin = margin(0, 0, 5, 0)),
# remove Y axis elements
axis.title.y = NULL,
axis.text.y = NULL,
axis.ticks.y = NULL,
# Customize legend text and position
legend.position = c(0.77, 0.5),
legend.direction = "vertical",
legend.key.width = unit(1, "cm"),
legend.box.spacing = unit(.5, "cm"),
legend.spacing.y = unit(.5, "cm"),
legend.margin = margin(),
# Set plot margins
plot.margin = margin(10, 0, 0, 0),
panel.spacing = margin(10, 0, 0, 0)
)
# Create barplot of each AE by AE severity for placebo group
placebo_plot <-
# Order plot by descending frequency of total percentage (placebo + treatment combined)
ggplot2::ggplot(
data = data %>% dplyr::filter(severity_col != "Total"),
ggplot2::aes(forcats::fct_reorder(term_col, total_perc))
) +
# Create barplot, fill the bar AE severity frequency
ggplot2::geom_col(ggplot2::aes(y = -placebo_perc, fill = severity_col)) +
# Create a line to show the difference between Placebo and Treatment frequencies
ggplot2::geom_segment(
data = data %>% dplyr::filter(severity_col == "Total"),
ggplot2::aes(xend = after_stat(x), y = 0, yend = diff_neg),
col = "#444E5F", # "#8e9aaf",
arrow = arrow(angle = 20, length = unit(1, "mm"))
) +
# Add PT text information near the bars
ggplot2::geom_text(
data = data %>% dplyr::filter(severity_col == "Total"),
ggplot2::aes(y = -placebo_perc, label = term_col),
hjust = 1,
nudge_y = -2,
col = "grey4",
size = 2
) +
# Y scale formatting
ggplot2::scale_y_continuous("Percentage (%)", expand = c(0, 0), position = "right", breaks = seq(-100, 0, 10), labels = abs) +
# Use custom colors/fills for AE severity
ggplot2::scale_fill_manual(values = c("#cbc0d3", "#8e9aaf", "#444E5F")) +
ggplot2::scale_color_manual(values = c("#cbc0d3", "#8e9aaf", "#444E5F")) +
# Flip cartesian coordinates so that horizontal becomes vertical, and vertical, horizontal
ggplot2::coord_flip(clip = "off", ylim = c(-100, -0)) +
# Remove legends
ggplot2::guides(fill = "none", color = "none")  +
# Set void theme
ggplot2::theme_void(base_family = "sans") +
# Update global theme
ggplot2::theme(
# The default font color when not explicitly specified
text = element_text(color = "grey24"),
# Use a light color for the background of the plot and the panel.
plot.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
panel.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
# Adjust axis parameters such as size and color.
axis.text.x.top = element_text(size = 6, color = "grey24"),
axis.ticks.x.top = element_line(size = 0.2, color = "grey24"),
axis.ticks.length.x.top = unit(1, "mm"),
axis.title.x.top = element_text(hjust=0.035, size = 6, margin = margin(0, 0, 5, 0)),
# remove Y axis elements
axis.title.y = NULL,
axis.text.y = NULL,
axis.ticks.y = NULL,
# Set plot margins
plot.margin = margin(10, 0, 0, 0),
panel.spacing = margin(10, 0, 0, 0)
)
# Combine both ggplot elements into the same graphic
final <- placebo_plot + treatment_plot + patchwork::plot_layout(widths = c(1,1)) +
patchwork::plot_annotation(
caption = "(CDISC Pilot data)",
theme = ggplot2::theme(panel.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
plot.background = element_rect(fill = "#fbf9f4", color = "#fbf9f4"),
plot.caption = element_text(hjust = 0.005, size = 8, face= "italic"),
plot.caption.position =  "plot",
plot.margin = margin(20, 25, 20, 25))
)
# Add subtitle inside the plot
final1 <- final +
ggtext::geom_richtext(
x = 11, y = -70, hjust = 0,
label = "<b style='color:#444E5F'>Placebo</b>",
label.colour = "grey80") +
ggtext::geom_richtext(
x = 4, y = 45, hjust = 0,
label = "<b style='color:#497135'>Xanomeline High Dose</b>",
label.colour = "grey80") +
ggtext::geom_textbox(
inherit.aes = FALSE,
data = tibble(
x = 2.8,
y = -80,
label = "The **bars** indicate the frequency of adverse events for <b style='color:#444E5F'>Placebo group</b>
and <b style='color:#497135'>Treatment group</b>. Only AEs with at least 1% occurence are presented.<br>
The **arrows** show the difference of percentage between both groups. Arrows pointing to the right indicate a positive difference in favor of placebo,
while arrows pointing to the left indicate a higher frequency of AEs in placebo group than treatment group."),
aes(
x = x,
y = y,
label = label),
hjust = 0, vjust = 0,
box.size = 0,
color = "grey38",
width = 0.42,
size = 3,
family = "sans",
fill = NA, label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt") # remove padding
)
return(final1)
}
mapping$settings$treatment_values[["group1"]]
mapping$settings$treatment_values$[["group1"]]
mapping$settings$treatment_values$group1"
)
""
mapping$settings$treatment_values$group1
mapping$settings$dm$treatment_values$group1
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(mapping = mapping)
)
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(dplyr)
library(forcats)
library(ggplot2)
library(patchwork)
library(ggtext)
sdtm_dm <- safetyData:: sdtm_dm %>% filter (ARMCD != "Scrnfail") %>%
mutate (ARM=if_else (ARM != "Placebo", "Treatment", "Placebo"))
setting <-list(
aes=list(id_col="USUBJID", bodsys_col="AEBODSYS", term_col="AEDECOD", severity_col="AESEV", serious_col="AESER"),
dm=list(id_col="USUBJID", treatment_col="ARM",  "treatment_values"=list(group1="Placebo", "group2" = "Xanomeline High Dose"))
)
mapping <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
View(sdtm_dm)
View(mapping)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(mapping = mapping)
)
}
library(dplyr)
library(forcats)
library(ggplot2)
library(patchwork)
library(ggtext)
sdtm_dm <- safetyData:: sdtm_dm %>% filter (ARMCD != "Scrnfail") %>%
mutate (ARM=if_else (ARM != "Placebo", "Treatment", "Placebo"))
setting <-list(
aes=list(id_col="USUBJID", bodsys_col="AEBODSYS", term_col="AEDECOD", severity_col="AESEV", serious_col="AESER"),
dm=list(id_col="USUBJID", treatment_col="ARM",  "treatment_values"=list(group1="Placebo", "group2" = "Xanomeline High Dose"))
)
mapping <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
rlang::sym(settings$dm$id_col)
rlang::sym(setting$dm$id_col)
sym(setting$dm$id_col)
setting$dm$id_col
## Run checks ----
## Check the package before sending to prod
devtools::check()
install.packages("devtools")
## Run checks ----
## Check the package before sending to prod
devtools::check()
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
# Add default treatment columns
mapping <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(charts=charts, mapping=mapping)
install.packages("safetyGraphics")
library(safetyGraphics)
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
# Add default treatment columns
mapping <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(charts=charts, mapping=mapping)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), charts=charts, mapping=mapping)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(data = mapping$data, charts=charts, mapping=mapping)
tornadoplot::run_app()
?safetyGraphicsApp
safetyGraphics::safetyGraphicsApp(domainData = mapping$data, charts=charts, mapping=mapping)
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(safetyGraphics)
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(safetyGraphics)
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(safetyGraphics)
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
install.packages("~/tornadoplot_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(safetyGraphics)
library(tornadoplot)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
# Add default treatment columns
mapping <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = mapping$data, charts=charts, mapping=mapping)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(charts=charts, mapping=mapping)
mapping$data
test <- mapping$data
View(test)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = sdtm, charts=charts, meta=mapping, mapping=mapping)
sdtm <- mapping$data
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = sdtm, charts=charts, meta=mapping, mapping=mapping)
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = sdtm, charts=charts, mapping=mapping)
# Load standard graphics from safetyCharts + Volcano plot
charts<-c(
#safetyGraphics::makeChartConfig(),
safetyGraphics::makeChartConfig(packages="tornadoplot")
)
# Add default treatment columns
mapping <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
sdtm <- mapping$data
#Initialize SafetyGraphics app.
safetyGraphics::safetyGraphicsApp(domainData = sdtm, charts=charts, mapping=mapping)
makeMeta(charts)
tornadoplot::run_app()
charts
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
install.packages("ggtext")
remotes::install_github("hadley/emo")
remotes::install_github("hadley/emo", force = TRUE)
remotes::install_github("JohnCoene/typedjs", force = TRUE)
remotes::install_github("daattali/shinybrowser", force = TRUE)
remotes::install_github("RinteRface/fullPage", force = TRUE)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
install.packages("patchwork")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
install.packages("safetyData")
install.packages("safetyData")
library(dplyr)
library(safetyData)
# Remove screen failures data
sdtm_dm <- safetyData:: sdtm_dm %>% filter (ARMCD != "Scrnfail")
# settings for tornado plot
setting <-list(
aes=list(id_col="USUBJID", bodsys_col="AEBODSYS", term_col="AEDECOD", severity_col="AESEV", serious_col="AESER"),
dm=list(id_col="USUBJID", treatment_col="ARM")
)
# params to be loaded for the tornado plot / mandatory except if it runs with SafetyGraphics
params <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
library(dplyr)
library(safetyData)
# Remove screen failures data
sdtm_dm <- safetyData:: sdtm_dm %>% filter (ARMCD != "Scrnfail")
# settings for tornado plot
setting <-list(
aes=list(id_col="USUBJID", bodsys_col="AEBODSYS", term_col="AEDECOD", severity_col="AESEV", serious_col="AESER"),
dm=list(id_col="USUBJID", treatment_col="ARM")
)
# params to be loaded for the tornado plot / mandatory except if it runs with SafetyGraphics
params <- list(data = list(dm = sdtm_dm, aes = safetyData::sdtm_ae), settings = setting)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
options(shiny.trace=FALSE)
run_app()
